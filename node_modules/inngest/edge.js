"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
exports.name = "edge";
/**
 * In an edge runtime, serve and register any declared functions with Inngest,
 * making them available to be triggered by events.
 *
 * The edge runtime is a generic term for any serverless runtime that supports
 * only standard Web APIs such as `fetch`, `Request`, and `Response`, such as
 * Cloudflare Workers, Vercel Edge Functions, and AWS Lambda@Edge.
 *
 * @example
 * ```ts
 * import { serve } from "inngest/edge";
 * import fns from "~/inngest";
 *
 * export const handler = serve("My Edge App", fns);
 * ```
 */
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, Object.assign({ fetch: fetch.bind(globalThis) }, opts), (req) => {
        const url = new URL(req.url, `https://${req.headers.get("host") || ""}`);
        return {
            url,
            register: () => {
                if (req.method === "PUT") {
                    return {
                        deployId: url.searchParams.get(consts_1.queryKeys.DeployId),
                    };
                }
            },
            run: async () => {
                if (req.method === "POST") {
                    return {
                        data: (await req.json()),
                        fnId: url.searchParams.get(consts_1.queryKeys.FnId),
                        stepId: url.searchParams.get(consts_1.queryKeys.StepId),
                        signature: req.headers.get(consts_1.headerKeys.Signature),
                    };
                }
            },
            view: () => {
                if (req.method === "GET") {
                    return {
                        isIntrospection: url.searchParams.has(consts_1.queryKeys.Introspect),
                    };
                }
            },
        };
    }, ({ body, status, headers }) => {
        return new Response(body, { status, headers });
    });
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=edge.js.map
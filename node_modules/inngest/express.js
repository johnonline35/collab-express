"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
exports.name = "express";
/**
 * Serve and register any declared functions with Inngest, making them available
 * to be triggered by events.
 *
 * @public
 */
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, opts, (req, _res) => {
        const hostname = req.get("host") || req.headers["host"];
        const protocol = (hostname === null || hostname === void 0 ? void 0 : hostname.includes("://")) ? "" : `${req.protocol}://`;
        const url = new URL(req.originalUrl, `${protocol}${hostname || ""}`);
        return {
            url,
            run: () => {
                if (req.method === "POST") {
                    return {
                        fnId: req.query[consts_1.queryKeys.FnId],
                        stepId: req.query[consts_1.queryKeys.StepId],
                        data: req.body,
                        signature: req.headers[consts_1.headerKeys.Signature],
                    };
                }
            },
            register: () => {
                var _a;
                if (req.method === "PUT") {
                    return {
                        deployId: (_a = req.query[consts_1.queryKeys.DeployId]) === null || _a === void 0 ? void 0 : _a.toString(),
                    };
                }
            },
            view: () => {
                if (req.method === "GET") {
                    return {
                        isIntrospection: Object.hasOwnProperty.call(req.query, consts_1.queryKeys.Introspect),
                    };
                }
            },
        };
    }, (actionRes, _req, res) => {
        for (const [name, value] of Object.entries(actionRes.headers)) {
            res.setHeader(name, value);
        }
        return res.status(actionRes.status).send(actionRes.body);
    });
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=express.js.map
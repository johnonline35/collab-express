"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
exports.name = "cloudflare-pages";
/**
 * In Cloudflare, serve and register any declared functions with Inngest, making
 * them available to be triggered by events.
 *
 * @public
 */
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, Object.assign({ 
        /**
         * Assume that we want to override the `fetch` implementation with the one
         * globally available in the Cloudflare env. Specifying it here will
         * ensure we avoid trying to load a Node-compatible version later.
         */
        fetch: fetch.bind(globalThis) }, opts), ({ request: req, env, }) => {
        const url = new URL(req.url, `https://${req.headers.get("host") || ""}`);
        return {
            env,
            url,
            view: () => {
                if (req.method === "GET") {
                    return {
                        isIntrospection: url.searchParams.has(consts_1.queryKeys.Introspect),
                    };
                }
            },
            register: () => {
                if (req.method === "PUT") {
                    return {
                        deployId: url.searchParams.get(consts_1.queryKeys.DeployId),
                    };
                }
            },
            run: async () => {
                if (req.method === "POST") {
                    return {
                        fnId: url.searchParams.get(consts_1.queryKeys.FnId),
                        stepId: url.searchParams.get(consts_1.queryKeys.StepId),
                        data: (await req.json()),
                        signature: req.headers.get(consts_1.headerKeys.Signature) || undefined,
                    };
                }
            },
        };
    }, ({ body, status, headers }) => {
        return new Response(body, {
            status,
            headers,
        });
    });
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=cloudflare.js.map
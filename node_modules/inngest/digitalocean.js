"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
exports.name = "digitalocean";
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, opts, (main) => {
        // Copy all params as data.
        let _a = main || {}, { http } = _a, data = __rest(_a, ["http"]);
        if (http === undefined) {
            // This is an invocation from the DigitalOcean UI;  main is an empty object.
            // In this case provide some defaults so that this doesn't run functions.
            http = { method: "GET", headers: {}, path: "" };
            data = {};
        }
        // serveHost and servePath must be defined when running in DigitalOcean in order
        // for the SDK to properly register and run functions.
        //
        // DigitalOcean provides no hostname or path in its arguments during execution.
        const url = new URL(`${opts.serveHost}${(opts === null || opts === void 0 ? void 0 : opts.servePath) || "/"}`);
        return {
            url,
            register: () => {
                if (http.method === "PUT") {
                    return {
                        deployId: main[consts_1.queryKeys.DeployId],
                    };
                }
            },
            run: () => {
                if (http.method === "POST") {
                    return {
                        data: data,
                        fnId: main[consts_1.queryKeys.FnId] || "",
                        stepId: main[consts_1.queryKeys.StepId] || "",
                        signature: http.headers[consts_1.headerKeys.Signature],
                    };
                }
            },
            view: () => {
                if (http.method === "GET") {
                    return {
                        isIntrospection: Object.hasOwnProperty.call(main, consts_1.queryKeys.Introspect),
                    };
                }
            },
        };
    }, (res) => res);
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=digitalocean.js.map
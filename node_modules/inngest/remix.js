"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
exports.name = "remix";
/**
 * In Remix, serve and register any declared functions with Inngest, making them
 * available to be triggered by events.
 *
 * Remix requires that you export both a "loader" for serving `GET` requests,
 * and an "action" for serving other requests, therefore exporting both is
 * required.
 *
 * See {@link https://remix.run/docs/en/v1/guides/resource-routes}
 *
 * @example
 * ```ts
 * import { serve } from "inngest/remix";
 * import fns from "~/inngest";
 *
 * const handler = serve("My Remix App", fns);
 *
 * export { handler as loader, handler as action };
 * ```
 *
 * @public
 */
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, opts, ({ request: req }) => {
        const url = new URL(req.url, `https://${req.headers.get("host") || ""}`);
        return {
            url,
            register: () => {
                if (req.method === "PUT") {
                    return {
                        deployId: url.searchParams.get(consts_1.queryKeys.DeployId),
                    };
                }
            },
            run: async () => {
                if (req.method === "POST") {
                    return {
                        data: (await req.json()),
                        fnId: url.searchParams.get(consts_1.queryKeys.FnId),
                        stepId: url.searchParams.get(consts_1.queryKeys.StepId),
                        signature: req.headers.get(consts_1.headerKeys.Signature) || undefined,
                    };
                }
            },
            view: () => {
                if (req.method === "GET") {
                    return {
                        isIntrospection: url.searchParams.has(consts_1.queryKeys.Introspect),
                    };
                }
            },
        };
    }, ({ body, status, headers }) => {
        /**
         * If `Response` isn't included in this environment, it's probably a Node
         * env that isn't already polyfilling. In this case, we can polyfill it
         * here to be safe.
         */
        let Res;
        if (typeof Response === "undefined") {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-var-requires
            Res = require("cross-fetch").Response;
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            Res = Response;
        }
        return new Res(body, {
            status,
            headers,
        });
    });
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=remix.js.map
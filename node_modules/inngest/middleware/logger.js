"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ProxyLogger_logger, _ProxyLogger_enabled;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyLogger = exports.DefaultLogger = void 0;
class DefaultLogger {
    info(...args) {
        console.info(...args);
    }
    warn(...args) {
        console.warn(...args);
    }
    error(...args) {
        console.error(...args);
    }
    debug(...args) {
        console.debug(...args);
    }
}
exports.DefaultLogger = DefaultLogger;
/**
 * ProxyLogger aims to provide a thin wrapper on user's provided logger.
 * It's expected to be turned on and off based on the function execution
 * context, so it doesn't result in duplicated logging.
 *
 * And also attempt to allow enough time for the logger to flush all logs.
 */
class ProxyLogger {
    constructor(logger) {
        _ProxyLogger_logger.set(this, void 0);
        _ProxyLogger_enabled.set(this, false);
        __classPrivateFieldSet(this, _ProxyLogger_logger, logger, "f");
    }
    info(...args) {
        if (!__classPrivateFieldGet(this, _ProxyLogger_enabled, "f"))
            return;
        __classPrivateFieldGet(this, _ProxyLogger_logger, "f").info(...args);
    }
    warn(...args) {
        if (!__classPrivateFieldGet(this, _ProxyLogger_enabled, "f"))
            return;
        __classPrivateFieldGet(this, _ProxyLogger_logger, "f").warn(...args);
    }
    error(...args) {
        if (!__classPrivateFieldGet(this, _ProxyLogger_enabled, "f"))
            return;
        __classPrivateFieldGet(this, _ProxyLogger_logger, "f").error(...args);
    }
    debug(...args) {
        // there are loggers that don't implement "debug" by default
        if (!__classPrivateFieldGet(this, _ProxyLogger_enabled, "f") || !(typeof __classPrivateFieldGet(this, _ProxyLogger_logger, "f").debug === "function"))
            return;
        __classPrivateFieldGet(this, _ProxyLogger_logger, "f").debug(...args);
    }
    enable() {
        __classPrivateFieldSet(this, _ProxyLogger_enabled, true, "f");
    }
    disable() {
        __classPrivateFieldSet(this, _ProxyLogger_enabled, false, "f");
    }
    async flush() {
        // Allow 1s for the provided logger to handle flushing since the ones that do
        // flushing usually has some kind of timeout of up to 1s.
        //
        // TODO:
        // This should only happen when using a serverless environment because it's very
        // costly from the compute perspective.
        // server runtimes should just let the logger do their thing since most of them
        // should have already figured what to do in those environments, be it threading or
        // something else.
        if (__classPrivateFieldGet(this, _ProxyLogger_logger, "f").constructor.name !== DefaultLogger.name) {
            await new Promise((resolve) => {
                setTimeout(() => resolve(null), 1000);
            });
        }
    }
}
exports.ProxyLogger = ProxyLogger;
_ProxyLogger_logger = new WeakMap(), _ProxyLogger_enabled = new WeakMap();
//# sourceMappingURL=logger.js.map
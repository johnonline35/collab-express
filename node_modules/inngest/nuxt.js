"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const h3_1 = require("h3");
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
const env_1 = require("./helpers/env");
exports.name = "nuxt";
/**
 * In Nuxt 3, serve and register any declared functions with Inngest, making
 * them available to be triggered by events.
 *
 * @public
 */
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, opts, (event) => {
        const host = String((0, h3_1.getHeader)(event, "host"));
        const protocol = (0, env_1.processEnv)("NODE_ENV") === "development" ? "http" : "https";
        const url = new URL(String(event.path), `${protocol}://${host}`);
        const method = (0, h3_1.getMethod)(event);
        const query = (0, h3_1.getQuery)(event);
        return {
            url,
            run: async () => {
                var _a, _b, _c, _d;
                if (method === "POST") {
                    return {
                        fnId: (_b = (_a = query[consts_1.queryKeys.FnId]) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
                        stepId: (_d = (_c = query[consts_1.queryKeys.StepId]) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : "",
                        signature: (0, h3_1.getHeader)(event, consts_1.headerKeys.Signature),
                        data: await (0, h3_1.readBody)(event),
                    };
                }
            },
            register: () => {
                var _a;
                if (method === "PUT") {
                    return {
                        deployId: (_a = query[consts_1.queryKeys.DeployId]) === null || _a === void 0 ? void 0 : _a.toString(),
                    };
                }
            },
            view: () => {
                if (method === "GET") {
                    return {
                        isIntrospection: query && consts_1.queryKeys.Introspect in query,
                    };
                }
            },
        };
    }, (actionRes, event) => {
        const { res } = event.node;
        res.statusCode = actionRes.status;
        (0, h3_1.setHeaders)(event, actionRes.headers);
        return (0, h3_1.send)(event, actionRes.body);
    });
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=nuxt.js.map
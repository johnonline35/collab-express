#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
/**
 * Init initializes the context for running the function.  This calls
 * start() when
 */
async function init() {
    const [, , fnPath = "", rawContext = "null"] = process.argv;
    // We pass the event in as an argument to the node function.  Running
    // npx ts-node "./foo.bar" means we have 2 arguments prior to the event.
    // We'll also be adding stdin and lambda compatibility soon.
    const context = JSON.parse(rawContext);
    if (!context) {
        throw new Error("unable to parse context");
    }
    // Import this asynchronously, such that any top-level
    // errors in user code are caught.
    const { run } = (await Promise.resolve(`${path_1.default.join(process.cwd(), fnPath)}`).then(s => __importStar(require(s))));
    const result = await run(context);
    /**
     * We could also validate the response format (status code required) here and
     * throw an error if it's not there?
     */
    return result;
}
init()
    .then((body) => {
    if (typeof body === "string") {
        console.log(JSON.stringify({ body }));
        return;
    }
    console.log(JSON.stringify(body));
})
    .catch((e) => {
    // TODO: Log error and stack trace.
    console.log(JSON.stringify({
        error: e.stack || e.message,
        status: 500,
    }));
    process.exit(1);
});
//# sourceMappingURL=init.js.map
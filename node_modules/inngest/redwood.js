"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.name = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
const consts_1 = require("./helpers/consts");
const env_1 = require("./helpers/env");
exports.name = "redwoodjs";
/**
 * In Redwood.js, serve and register any declared functions with Inngest, making
 * them available to be triggered by events.
 *
 * @public
 */
const serve = (nameOrInngest, fns, opts) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(exports.name, nameOrInngest, fns, opts, (event, _context) => {
        const scheme = (0, env_1.processEnv)("NODE_ENV") === "development" ? "http" : "https";
        const url = new URL(event.path, `${scheme}://${event.headers.host || ""}`);
        return {
            url,
            register: () => {
                var _a;
                if (event.httpMethod === "PUT") {
                    return {
                        deployId: (_a = event.queryStringParameters) === null || _a === void 0 ? void 0 : _a[consts_1.queryKeys.DeployId],
                    };
                }
            },
            run: () => {
                var _a, _b;
                if (event.httpMethod === "POST") {
                    /**
                     * Some requests can be base64 encoded, requiring us to decode it
                     * first before parsing as JSON.
                     */
                    const data = JSON.parse(event.body
                        ? event.isBase64Encoded
                            ? Buffer.from(event.body, "base64").toString()
                            : event.body
                        : "{}");
                    return {
                        data,
                        fnId: (_a = event.queryStringParameters) === null || _a === void 0 ? void 0 : _a[consts_1.queryKeys.FnId],
                        signature: event.headers[consts_1.headerKeys.Signature],
                        stepId: (_b = event.queryStringParameters) === null || _b === void 0 ? void 0 : _b[consts_1.queryKeys.StepId],
                    };
                }
            },
            view: () => {
                if (event.httpMethod === "GET") {
                    return {
                        isIntrospection: Object.hasOwnProperty.call(event.queryStringParameters, consts_1.queryKeys.Introspect),
                    };
                }
            },
        };
    }, (actionRes) => {
        return {
            statusCode: actionRes.status,
            body: actionRes.body,
            headers: actionRes.headers,
        };
    });
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=redwood.js.map
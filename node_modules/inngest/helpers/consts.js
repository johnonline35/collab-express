"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.internalEvents = exports.defaultDevServerHost = exports.headerKeys = exports.prodEnvKeys = exports.envKeys = exports.queryKeys = void 0;
/**
 * Keys for accessing query parameters included in requests from Inngest to run
 * functions.
 *
 * Used internally to create handlers using `InngestCommHandler`, but can be
 * imported to be used if creating a custom handler outside of the package.
 *
 * @public
 */
var queryKeys;
(function (queryKeys) {
    queryKeys["FnId"] = "fnId";
    queryKeys["StepId"] = "stepId";
    queryKeys["Introspect"] = "introspect";
    queryKeys["DeployId"] = "deployId";
})(queryKeys = exports.queryKeys || (exports.queryKeys = {}));
var envKeys;
(function (envKeys) {
    envKeys["SigningKey"] = "INNGEST_SIGNING_KEY";
    envKeys["EventKey"] = "INNGEST_EVENT_KEY";
    envKeys["LandingPage"] = "INNGEST_LANDING_PAGE";
    envKeys["DevServerUrl"] = "INNGEST_DEVSERVER_URL";
    envKeys["Environment"] = "INNGEST_ENV";
    envKeys["BranchName"] = "BRANCH_NAME";
    /**
     * The git branch of the commit the deployment was triggered by. Example:
     * `improve-about-page`.
     *
     * {@link https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables}
     */
    envKeys["VercelBranch"] = "VERCEL_GIT_COMMIT_REF";
    /**
     * Expected to be `"1"` if defined.
     */
    envKeys["IsVercel"] = "VERCEL";
    /**
     * The branch name of the current deployment. May only be accessible at build
     * time, but included here just in case.
     *
     * {@link https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables}
     */
    envKeys["CloudflarePagesBranch"] = "CF_PAGES_BRANCH";
    /**
     * Expected to be `"1"` if defined.
     */
    envKeys["IsCloudflarePages"] = "CF_PAGES";
    /**
     * The branch name of the deployment from Git to Netlify, if available.
     *
     * {@link https://docs.netlify.com/configure-builds/environment-variables/#git-metadata}
     */
    envKeys["NetlifyBranch"] = "BRANCH";
    /**
     * Expected to be `"true"` if defined.
     */
    envKeys["IsNetlify"] = "NETLIFY";
    /**
     * The Git branch for a service or deploy.
     *
     * {@link https://render.com/docs/environment-variables#all-services}
     */
    envKeys["RenderBranch"] = "RENDER_GIT_BRANCH";
    /**
     * Expected to be `"true"` if defined.
     */
    envKeys["IsRender"] = "RENDER";
    /**
     * The branch that triggered the deployment. Example: `main`
     *
     * {@link https://docs.railway.app/develop/variables#railway-provided-variables}
     */
    envKeys["RailwayBranch"] = "RAILWAY_GIT_BRANCH";
    /**
     * The railway environment for the deployment. Example: `production`
     *
     * {@link https://docs.railway.app/develop/variables#railway-provided-variables}
     */
    envKeys["RailwayEnvironment"] = "RAILWAY_ENVIRONMENT";
})(envKeys = exports.envKeys || (exports.envKeys = {}));
var prodEnvKeys;
(function (prodEnvKeys) {
    prodEnvKeys["NodeEnvKey"] = "NODE_ENV";
    prodEnvKeys["VercelEnvKey"] = "VERCEL_ENV";
    prodEnvKeys["NetlifyEnvKey"] = "CONTEXT";
})(prodEnvKeys = exports.prodEnvKeys || (exports.prodEnvKeys = {}));
/**
 * Keys for accessing headers included in requests from Inngest to run
 * functions.
 *
 * Used internally to create handlers using `InngestCommHandler`, but can be
 * imported to be used if creating a custom handler outside of the package.
 *
 * @public
 */
var headerKeys;
(function (headerKeys) {
    headerKeys["Signature"] = "x-inngest-signature";
    headerKeys["SdkVersion"] = "x-inngest-sdk";
    headerKeys["Environment"] = "x-inngest-env";
    headerKeys["Platform"] = "x-inngest-platform";
    headerKeys["Framework"] = "x-inngest-framework";
})(headerKeys = exports.headerKeys || (exports.headerKeys = {}));
exports.defaultDevServerHost = "http://127.0.0.1:8288/";
/**
 * Events that Inngest may send internally that can be used to trigger
 * functions.
 *
 * @public
 */
var internalEvents;
(function (internalEvents) {
    /**
     * A function has failed after exhausting all available retries. This event
     * will contain the original event and the error that caused the failure.
     */
    internalEvents["FunctionFailed"] = "inngest/function.failed";
})(internalEvents = exports.internalEvents || (exports.internalEvents = {}));
//# sourceMappingURL=consts.js.map
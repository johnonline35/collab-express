/**
 * A helper function to create a `Promise` that will never settle.
 *
 * It purposefully creates no references to `resolve` or `reject` so that the
 * returned `Promise` will remain unsettled until it falls out of scope and is
 * garbage collected.
 *
 * This should be used within transient closures to fake asynchronous action, so
 * long as it's guaranteed that they will fall out of scope.
 */
export declare const createFrozenPromise: () => Promise<unknown>;
/**
 * Returns a Promise that resolves after the current event loop's microtasks
 * have finished, but before the next event loop tick.
 */
export declare const resolveAfterPending: () => Promise<void>;
/**
 * Returns a Promise that resolve after the current event loop tick.
 */
export declare const resolveNextTick: () => Promise<void>;
//# sourceMappingURL=promises.d.ts.map